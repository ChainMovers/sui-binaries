name: Build Suibase Daemon

on:
  push:
    paths:
      - "triggers/suibase-daemon/Cargo.toml"
      - ".github/workflows/build-suibase-daemon.yml"
  workflow_dispatch:

env:
  asset_name: "suibase-daemon"

permissions: write-all

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from Cargo.toml
        id: cargo_version
        run: |
          cargo_filepath="triggers/${{ env.asset_name }}/Cargo.toml"
          if [ ! -f $cargo_filepath ]; then
            echo "$cargo_filepath does not exist"
            exit 1
          fi
          cargo_version=$(grep '^version' $cargo_filepath | sed 's/version = "\(.*\)"/\1/')
          echo "cargo_version=$cargo_version" >> $GITHUB_ENV
          echo "cargo_version: $cargo_version"
          tag_name="${{ env.asset_name }}-v$cargo_version"
          echo "tag_name=$tag_name" >> $GITHUB_ENV
          echo "tag_name: $tag_name"

      - name: Ensure tag exists
        uses: actions/github-script@v7
        id: ensure_tag
        with:
          script: |
            const tag_name = "${{ env.tag_name }}";

            // Attempt to get the tag to see if it already exists
            try {
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${tag_name}`,
              });
              console.log(`Tag [${tag_name}] already exists.`);
            } catch (error) {
              if (error.status === 404) {
                // Tag does not exist, so create it
                let sha;
                try {
                  const commitResponse = await github.rest.repos.getCommit({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: 'heads/main', // Replace 'main' with your default branch if different
                  });
                  sha = commitResponse.data.sha;
                } catch (error) {
                  core.setFailed(`Error getting commit SHA: ${error}`);
                  return;
                }

                try {
                  const createRefResponse = await github.rest.git.createRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `refs/tags/${tag_name}`,
                    sha: sha,
                  });

                  // Check if the tag creation was successful
                  if (createRefResponse.status >= 200 && createRefResponse.status < 300) {
                    console.log(`Tag [${tag_name}] created successfully.`);
                  } else {
                    core.setFailed(`Failed to create tag [${tag_name}]. Response: ${createRefResponse.status}`);
                    return;
                  }
                } catch (createRefError) {
                  core.setFailed(`Failed to create tag [${tag_name}]. ${createRefError}`);
                  return;
                }
              } else {
                core.setFailed(`Failed to getRef for tag [${tag_name}]. ${error}`);
                return;
              }
            }

      - name: Ensure Release exists and init release_vars
        id: release_vars
        uses: actions/github-script@v7
        with:
          script: |
            let tag_name = "${{ env.tag_name }}";
            console.log(`tag_name: ${tag_name}`);
            let upload_url;

            try {
              // Check if the release already exists
              const { data: releases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              const release = releases.find(release => release.tag_name === tag_name);

              if (release) {
                console.log(`Release already exists for [${tag_name}]`);
                upload_url = release.upload_url;
              } else {
                // Release does not exists, so create it.
                const response = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: tag_name,
                  name: tag_name,
                  draft: true,
                  prerelease: false,
                });
                if (response.status >= 200 && response.status < 300 && response.data.upload_url) {
                  console.log(`Release created with tag [${tag_name}]`);
                  upload_url = response.data.upload_url;
                } else {
                  core.setFailed(`Failed to create release with tag [${tag_name}] Status: ${response.status}`);
                  return;
                }
              }
            } catch (error) {
              core.setFailed(`Error while listing or creating releases: ${error.message}`);
              return;
            }

            core.setOutput("upload_url", upload_url);

    outputs:
      cargo_version: ${{ env.cargo_version }}
      tag_name: ${{ env.tag_name }}
      upload_url: ${{ steps.release_vars.outputs.upload_url }}

  build-assets:
    needs: prepare-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, macos-13]
        include:
          - os: ubuntu-latest
            asset-name-suffix: ubuntu-x86_64
          - os: macos-latest
            asset-name-suffix: macos-arm64
          - os: macos-13
            asset-name-suffix: macos-x86_64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Init asset_vars
        id: asset_vars
        uses: actions/github-script@v7
        with:
          script: |
            const tag_name = "${{ needs.prepare-release.outputs.tag_name }}";
            console.log(`subsequent job tag_name: ${tag_name}`);
            const asset_name = `${tag_name}-${{ matrix.asset-name-suffix }}.tgz`;
            core.setOutput("asset_name", asset_name);

            let releases;
            try {
              releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
            } catch (error) {
              core.setFailed(`Error fetching releases: ${error}`);
              return;
            }

            const release = releases.data.find(release => release.tag_name === tag_name);
            if (!release) {
              core.setFailed(`Release tag not found [${tag_name}]: ${error.message}`);
              return;
            }

            const assetExists = release.assets.some(asset => asset.name === asset_name);
            if (!assetExists) {
               console.log(`Build needed for [${asset_name}]`);
               core.setOutput("do_build", "true");
            } else {
               console.log(`No build needed for [${asset_name}]`);
               core.setOutput("do_build", "false");
            }

      #- name: Free Disk Space (Ubuntu)
      #  if: steps.asset_vars.outputs.do_build == 'true' && runner.os == 'Linux'
      #  uses: jlumbroso/free-disk-space@main
      #  with:
      # 'true' means remove...
      #    tool-cache: true
      #    android: true
      #    dotnet: true
      #    haskell: true
      #    large-packages: true
      #    docker-images: true
      #    swap-storage: false # Not sure if needed for heavy link... keep it for now.

      - name: Install Rust Toolchain
        if: steps.asset_vars.outputs.do_build == 'true'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: "false" # Control cache in "Rust Caching" step instead.

      - name: Sui Prerequisites
        if: steps.asset_vars.outputs.do_build == 'true'
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get install curl cmake gcc libssl-dev pkg-config libclang-dev libpq-dev build-essential
            echo Installed Linux dependencies
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install curl cmake
            echo Installed macOS dependencies
          else
            echo "Unsupported OS: $RUNNER_OS"
            exit 1
          fi

      - name: Download Suibase and add to $PATH
        if: steps.asset_vars.outputs.do_build == 'true'
        run: |
          mkdir -p $HOME/.local/bin
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          git clone https://github.com/ChainMovers/suibase.git $HOME/suibase

      - name: Install Suibase
        if: steps.asset_vars.outputs.do_build == 'true'
        run: |
          $HOME/suibase/install

      - name: Build asset
        if: steps.asset_vars.outputs.do_build == 'true'
        run: |
          asset_name="${{ steps.asset_vars.outputs.asset_name }}"
          cargo_version="${{ needs.prepare-release.outputs.cargo_version }}"
          # Don't care about the exit code of update-daemon. What is important
          # is if the binary was built or not.
          $HOME/suibase/update-daemon || true
          if [ ! -f $HOME/suibase/workdirs/common/bin/suibase-daemon ]; then
            echo "suibase-daemon not found"
            exit 1
          fi

          # Sanity test that the binary version is as expected.
          version=$($HOME/suibase/workdirs/common/bin/suibase-daemon --version)
          if [[ $version != *$cargo_version ]]; then
            echo "Version mismatch: $version != $cargo_version"
            exit 1
          fi

          # Build the archive
          cd $HOME
          tar -czf $asset_name -C $HOME suibase/workdirs/common/bin/suibase-daemon

          # Verify that the asset is indeed located in $HOME.
          if [ ! -f $HOME/$asset_name ]; then
            echo "Asset not built: $asset_name"
            exit 1
          fi
          echo "Asset built: $asset_name"

      - name: Upload Asset to Release
        if: steps.asset_vars.outputs.do_build == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');

            const asset_name = "${{ steps.asset_vars.outputs.asset_name }}";
            const upload_url = "${{ needs.prepare-release.outputs.upload_url }}";
            const cargo_version = "${{ needs.prepare-release.outputs.cargo_version }}";

            const assetPath = path.join(process.env.HOME, asset_name);
            const tempDir = fs.mkdtempSync(path.join(process.env.HOME, 'temp-'));

            // Decompress the asset into the temporary directory
            execSync(`tar -xzf ${assetPath} -C ${tempDir}`);

            // Run the asset with "--version" parameter
            const binaryPath = path.join(tempDir, 'suibase/workdirs/common/bin/suibase-daemon');
            const versionOutput = execSync(`${binaryPath} --version`).toString().trim();

            // Check if the version matches cargo_version
            if (!versionOutput.endsWith(cargo_version)) {
              core.setFailed(`Version mismatch: ${versionOutput} != ${cargo_version}`);
              return;
            }

            // All good. Upload the asset.
            const contentType = 'application/gzip';
            const contentLength = fs.statSync(assetPath).size;

            const headers = {
              'content-type': contentType,
              'content-length': contentLength,
            };

            const uploadAssetResponse = await github.rest.repos.uploadReleaseAsset({
              url: upload_url,
              headers,
              name: asset_name,
              data: fs.readFileSync(assetPath),
            });

            if (uploadAssetResponse.status !== 201) {
              core.setFailed(`Failed to upload ${asset_name}: ${uploadAssetResponse.status}`);
              return;
            }

            console.log(`Uploaded ${asset_name} successfully.`);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  verify-and-publish-release:
    needs: [prepare-release, build-assets]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Change Draft to Release when all assets present
        uses: actions/github-script@v7
        with:
          script: |
            const tag_name = "${{ needs.prepare-release.outputs.tag_name }}";
            const expectedAssets = [
              `${tag_name}-ubuntu-x86_64.tgz`,
              `${tag_name}-macos-x86_64.tgz`,
              `${tag_name}-macos-arm64.tgz`
            ];
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const release = releases.find(release => release.tag_name === tag_name);
            if (!release) {
              core.setFailed(`Release [${tag_name}] not found`);
              return;
            }
            const asset_names = release.assets.map(asset => asset.name);
            const allAssetsPresent = expectedAssets.every(expectedAsset => asset_names.includes(expectedAsset));

            if (allAssetsPresent) {
              // Update the release to non-draft
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
                draft: false,
              });
              console.log(`Release ${tag_name} published successfully`);
            } else {
              core.setFailed(`Not all expected assets are present for ${tag_name}`);
              return;
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
