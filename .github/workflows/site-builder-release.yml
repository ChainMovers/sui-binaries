# This workflow runs 4 times a day (and dispatch).
#
#  (1) Download https://storage.googleapis.com/mysten-walrus-binaries/site-builder-$NETWORK-latest-$SYSTEM -o site-builder
#      (where $NETWORK is an input parameter to the workflow)
#
#  (2) Run "site-builder --version" to extract the "vx.y.z" string version (site-builder.exe when windows).
#
#  (3) If a newer version is found, then create a draft release named as follow:
#       "site-builder-$NETWORK-vx.y.z"
#
#  (4) Check if "site-builder-$NETWORK-vx.y.z" has an asset named "site-builder-$NETWORK-vx.y.z-$SYSTEM.tgz"
#      if not, package (tgz) the site-builder binary and upload it as an asset.
#
#  (5) Repeat step 1 to 4 for $SYSTEM being:
#        "ubuntu-x86_64"
#        "macos-arm64"
#        "macos-x86_64"
#        "windows-x86_64"
#      Take note that these must be run on different OS/github runners.
#
#  (6) Once all expected $SYSTEM binaries are uploaded, then promote the draft release
#      to an official release.
#
name: Site Builder Common Logic

on:
  workflow_call:
    inputs:
      network:
        required: true
        type: string
        description: "Network type (mainnet or testnet)"

jobs:
  # Download latest site-builder to identify latest version
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version_check.outputs.version }}
      has_new_version: ${{ steps.version_check.outputs.has_new_version }}
      should_build_assets: ${{ steps.version_check.outputs.should_build_assets }}
      release_tag: ${{ steps.version_check.outputs.release_tag }}
      upload_url: ${{ fromJSON(steps.create_or_get_release.outputs.result).upload_url }}
      release_id: ${{ fromJSON(steps.create_or_get_release.outputs.result).release_id }}

    steps:
      - name: Download latest site-builder (ubuntu)
        run: |
          mkdir -p ${{ runner.temp }}/site-builder
          curl -L https://storage.googleapis.com/mysten-walrus-binaries/site-builder-${{ inputs.network }}-latest-ubuntu-x86_64 -o ${{ runner.temp }}/site-builder/site-builder
          chmod +x ${{ runner.temp }}/site-builder/site-builder

          # Verify download was successful
          if [ ! -f ${{ runner.temp }}/site-builder/site-builder ]; then
            echo "Download failed - file not found"
            exit 1
          fi

          # Check file size
          filesize=$(wc -c < "${{ runner.temp }}/site-builder/site-builder")
          echo "Downloaded file size: $filesize bytes"
          if [ "$filesize" -lt 1000 ]; then
            echo "File size too small, likely not a valid binary"
            exit 1
          fi
      - name: Check version and existing releases
        id: version_check
        run: |
          echo "Raw version output:"
          ${{ runner.temp }}/site-builder/site-builder --version

          version=$(${{ runner.temp }}/site-builder/site-builder --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
          version="v$version"
          echo "Version detected: $version"
          release_tag="site-builder-${{ inputs.network }}-$version"
          echo "release_tag=$release_tag" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT

          # Check if release already exists
          if gh release view "$release_tag" &>/dev/null; then
            is_draft=$(gh release view "$release_tag" --json isDraft -q '.isDraft')
            if [ "$is_draft" = "true" ]; then
              echo "Found existing draft release: $release_tag"
              echo "has_new_version=false" >> $GITHUB_OUTPUT
              # We should still build assets for draft releases
              echo "should_build_assets=true" >> $GITHUB_OUTPUT
            else
              echo "Release $release_tag already exists and is published"
              echo "has_new_version=false" >> $GITHUB_OUTPUT
              echo "should_build_assets=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "New version detected: $version"
            echo "has_new_version=true" >> $GITHUB_OUTPUT
            echo "should_build_assets=true" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get release info (create as needed)
        id: create_or_get_release
        if: steps.version_check.outputs.should_build_assets == 'true'
        uses: actions/github-script@v7
        with:
          result-encoding: json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releaseTag = "${{ steps.version_check.outputs.release_tag }}";

            try {
              // First check if the release exists
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo
              });

              const existingRelease = releases.data.find(r => r.tag_name === releaseTag);

              if (existingRelease) {
                console.log(`Found existing release with ID: ${existingRelease.id}`);
                return {
                  upload_url: existingRelease.upload_url,
                  release_id: existingRelease.id
                };
              }

              // Create new release if it doesn't exist
              console.log(`Creating draft release: ${releaseTag}`);
              const response = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: releaseTag,
                name: releaseTag,
                draft: true,
                prerelease: false,
                generate_release_notes: true
              });

              console.log(`Draft release created with ID: ${response.data.id}`);
              return {
                upload_url: response.data.upload_url,
                release_id: response.data.id
              };
            } catch (error) {
              console.error(`Error with release: ${error.message}`);
              core.setFailed(error.message);
              return { upload_url: '', release_id: '' };
            }
  build-assets:
    needs: check-version
    if: ${{ needs.check-version.outputs.should_build_assets == 'true' }}
    runs-on: ${{ matrix.system.os }}
    env:
      ASSET_NAME: site-builder-${{ inputs.network }}-${{ needs.check-version.outputs.version }}-${{ matrix.system.name }}.tgz
      BINARY_NAME: site-builder${{ matrix.system.os == 'windows-latest' && '.exe' || '' }}
      RELEASE_TAG: ${{ needs.check-version.outputs.release_tag }}
      UPLOAD_URL: ${{ needs.check-version.outputs.upload_url }}
      RELEASE_ID: ${{ needs.check-version.outputs.release_id }}
    strategy:
      matrix:
        system:
          - { os: ubuntu-latest, name: ubuntu-x86_64 }
          - { os: macos-latest, name: macos-x86_64 }
          - { os: macos-latest, name: macos-arm64 }
          - { os: windows-latest, name: windows-x86_64 }
      fail-fast: false

    steps:
      - name: Check if asset already exists
        id: check_asset
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Environment variables:');
            console.log(`- ASSET_NAME: ${process.env.ASSET_NAME}`);
            console.log(`- BINARY_NAME: ${process.env.BINARY_NAME}`);
            console.log(`- RELEASE_TAG: ${process.env.RELEASE_TAG}`);
            console.log(`- UPLOAD_URL: ${process.env.UPLOAD_URL}`);
            console.log(`- RELEASE_ID: ${process.env.RELEASE_ID}`);

            const releaseTag = process.env.RELEASE_TAG;
            const assetName = process.env.ASSET_NAME;

            try {
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo
              });

              const release = releases.data.find(r => r.tag_name === releaseTag);
              if (!release) {
                console.log(`Error: Release ${releaseTag} not found`);
                return { exists: false };
              }

              const assetExists = release.assets.some(asset => asset.name === assetName);
              if (assetExists) {
                console.log(`Info: Asset ${assetName} already exists in release ${releaseTag}`);
                return { exists: true };
              } else {
                console.log(`Info: Asset ${assetName} does not exist in release ${releaseTag}`);
                return { exists: false };
              }
            } catch (error) {
              console.error(`Error: while checking assets: ${error.message}`);
              return { exists: false };
            }

      - name: Download site-builder binary
        if: fromJSON(steps.check_asset.outputs.result).exists == false
        run: |
          # Create directory (works on all platforms)
          mkdir -p "${{ runner.temp }}/site-builder"

          # Set binary path based on OS
          if [ "${{ runner.os }}" == "Windows" ]; then
              # For Windows, use native paths for file operations
              DOWNLOAD_URL="https://storage.googleapis.com/mysten-walrus-binaries/site-builder-${{ inputs.network }}-latest-${{ matrix.system.name }}.exe"
              BINARY_PATH="${{ runner.temp }}/site-builder/${{ env.BINARY_NAME }}"

              echo "Downloading $DOWNLOAD_URL to $BINARY_PATH"
              # Use curl with forward slashes even on Windows
              curl -L "$DOWNLOAD_URL" -o "$BINARY_PATH"

              # No need to chmod on Windows
          else
              # For Linux/macOS
              DOWNLOAD_URL="https://storage.googleapis.com/mysten-walrus-binaries/site-builder-${{ inputs.network }}-latest-${{ matrix.system.name }}"
              BINARY_PATH="${{ runner.temp }}/site-builder/${{ env.BINARY_NAME }}"
              curl -L "$DOWNLOAD_URL" -o "$BINARY_PATH"
              chmod +x "${{ runner.temp }}/site-builder/${{ env.BINARY_NAME }}"
          fi

          # Verify download was successful
          if [ ! -f "${{ runner.temp }}/site-builder/${{ env.BINARY_NAME }}" ]; then
              echo "Download failed - file not found at ${{ runner.temp }}/site-builder/${{ env.BINARY_NAME }}"
              exit 1
          fi

          # Check file size
          filesize=$(wc -c < "${{ runner.temp }}/site-builder/${{ env.BINARY_NAME }}" 2>/dev/null || echo 0)
          echo "Downloaded file size: $filesize bytes"
          if [ "$filesize" -lt 1000 ]; then
              echo "File size too small, likely not a valid binary"
              exit 1
          fi
        shell: bash

      - name: Sanity check version
        if: fromJSON(steps.check_asset.outputs.result).exists == false
        run: |
          detected_version=""

          if [ "${{ matrix.system.name }}" == "macos-arm64" ]; then
              # macos-latest is x86_64, so can't run ARM64 binary...
              # So just validate the "arm64" embeded file type exists.
              if [ "${{ matrix.system.name }}" == "macos-arm64" ]; then
                  if file ${{ runner.temp }}/site-builder/${{ env.BINARY_NAME }} | grep -q "arm64"; then
                      echo "Verified ARM64 binary"
                  else
                      echo "Not an ARM64 binary!"
                      exit 1
                  fi
              fi
          else
              # Try to get version - handle different formats across platforms
              if [ "${{ runner.os }}" == "Windows" ]; then
                  "${{ runner.temp }}/site-builder/${{ env.BINARY_NAME }}" --version || {
                      echo "Error running Windows binary for version check"
                      exit 1
                  }

                  # More flexible pattern matching for Windows output
                  detected_version=$("${{ runner.temp }}/site-builder/${{ env.BINARY_NAME }}" --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' || echo "unknown")
              else
                  "${{ runner.temp }}/site-builder/${{ env.BINARY_NAME }}" --version
                  detected_version=$("${{ runner.temp }}/site-builder/${{ env.BINARY_NAME }}" --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
              fi

              # Add v prefix if needed
              if [[ $detected_version != v* ]]; then
                  detected_version="v$detected_version"
              fi

              # Check version
              if [ "$detected_version" == "${{ needs.check-version.outputs.version }}" ]; then
                  echo "Runtime version as expected [$detected_version]"
              else
                  echo "Runtime version mismatch: expected ${{ needs.check-version.outputs.version }} but got $detected_version"
                  exit 1
              fi
          fi
          echo "Version verified: $detected_version"
        shell: bash

      - name: Package binary
        if: fromJSON(steps.check_asset.outputs.result).exists == false
        run: |
          cd "${{ runner.temp }}/site-builder" || { echo "Failed to change directory"; exit 1; }

          echo "Packaging binary ${{ env.BINARY_NAME }} into ${{ env.ASSET_NAME }}"

          tar -czf "${{ env.ASSET_NAME }}" "${{ env.BINARY_NAME }}"

          # Verify archive was created successfully
          if [ ! -f "${{ env.ASSET_NAME }}" ]; then
              echo "Failed to create archive ${{ env.ASSET_NAME }}"
              exit 1
          fi

          echo "Archive contents:"
          tar -tvf "${{ env.ASSET_NAME }}"

          archive_size=$(wc -c < "${{ env.ASSET_NAME }}" 2>/dev/null || echo 0)
          echo "Archive size: $archive_size bytes"

          if [ "$archive_size" -lt 1000 ]; then
              echo "Warning: Archive size is suspiciously small"
              exit 1
          fi
        shell: bash

      - name: Upload Asset
        if: fromJSON(steps.check_asset.outputs.result).exists == false
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const tempDir = process.env.RUNNER_TEMP;
            const assetName = process.env.ASSET_NAME;
            const uploadUrl = process.env.UPLOAD_URL;

            const assetPath = path.join(tempDir, 'site-builder', assetName);

            if (!fs.existsSync(assetPath)) {
              console.error(`Asset file not found: ${assetPath}`);
              core.setFailed(`Asset file not found: ${assetPath}`);
              return;
            }

            const stats = fs.statSync(assetPath);

            console.log(`Uploading ${assetPath} (${stats.size} bytes) to ${uploadUrl}`);

            try {
              const uploadResponse = await github.rest.repos.uploadReleaseAsset({
                url: uploadUrl,
                headers: {
                  'content-type': 'application/gzip',
                  'content-length': stats.size
                },
                name: assetName,
                data: fs.readFileSync(assetPath)
              });

              console.log(`Asset uploaded successfully: ${uploadResponse.data.browser_download_url}`);
            } catch (error) {
              console.error(`Error uploading asset: ${error.message}`);
              core.setFailed(error.message);
            }

  publish-release:
    needs: [check-version, build-assets]
    if: ${{ needs.check-version.outputs.has_new_version == 'true' && always() }}
    runs-on: ubuntu-latest
    env:
      RELEASE_TAG: ${{ needs.check-version.outputs.release_tag }}
      UPLOAD_URL: ${{ needs.check-version.outputs.upload_url }}
      RELEASE_ID: ${{ needs.check-version.outputs.release_id }}
      VERSION: ${{ needs.check-version.outputs.version }}
      NETWORK: ${{ inputs.network }}

    steps:
      - name: Verify all assets and publish release
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Environment variables:');
            console.log(`- RELEASE_TAG: ${process.env.RELEASE_TAG}`);
            console.log(`- UPLOAD_URL: ${process.env.UPLOAD_URL}`);
            console.log(`- RELEASE_ID: ${process.env.RELEASE_ID}`);
            console.log(`- VERSION: ${process.env.VERSION}`);
            console.log(`- NETWORK: ${process.env.NETWORK}`);

            const releaseTag = process.env.RELEASE_TAG;
            const uploadUrl = process.env.UPLOAD_URL;
            const releaseId = process.env.RELEASE_ID;
            const version = process.env.VERSION;
            const network = process.env.NETWORK;

            const expectedSystems = [
              'ubuntu-x86_64',
              'macos-arm64',
              'macos-x86_64',
              'windows-x86_64'
            ];

            try {
              // Get the release
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo
              });

              const release = releases.data.find(r => r.tag_name === releaseTag);
              if (!release) {
                console.error(`Release ${releaseTag} not found`);
                core.setFailed(`Release ${releaseTag} not found`);
                return;
              }

              // release.id is a number, so make releaseId to be same type (else !== will fail)
              const numericReleaseId = parseInt(releaseId, 10);

              // Sanity test that release.id matches the one identified
              // ealier in the workflow.
              if (release.id !== numericReleaseId) {
                console.error(`Release ID string is [${releaseId}]`);
                console.error(`Release ID mismatch: expected ${numericReleaseId} but got ${release.id}`);
                core.setFailed(`Release ID mismatch: expected ${numericReleaseId} but got ${release.id}`);
                return;
              }

              // Check for all required assets
              const expectedAssets = expectedSystems.map(system =>
                `site-builder-${network}-${version}-${system}.tgz`
              );

              const missingAssets = expectedAssets.filter(expectedAsset =>
                !release.assets.some(asset => asset.name === expectedAsset)
              );

              if (missingAssets.length > 0) {
                console.log(`Release ${releaseTag} is missing these assets: ${missingAssets.join(', ')}`);
                console.log('Not publishing release yet. Waiting for all assets to be uploaded.');
                return;
              }

              // All assets are present, publish the release
              console.log(`All required assets found for ${releaseTag}. Publishing release.`);
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId,
                draft: false
              });

              console.log(`Release ${releaseTag} has been published successfully!`);
            } catch (error) {
              console.error(`Error publishing release: ${error.message}`);
              core.setFailed(error.message);
            }
